/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  Color,
} from './utils/color';


export namespace Components {

  interface MscButton {
    /**
    * Style the button with slightly smaller text and container.
    */
    'dense': boolean;
    /**
    * Prevent the button from being clicked.
    */
    'disabled': boolean;
    /**
    * The name of the icon to use with the button.  Name must be that of the [Material Icons](https://material.io/tools/icons/?style=baseline).
    */
    'icon': string;
    /**
    * The label text to display on the button.
    */
    'label': string;
    /**
    * Style the button with an outline.
    */
    'outlined': boolean;
    /**
    * Styles the button such that it appears to be raised off the surface it is on.
    */
    'raised': boolean;
    /**
    * A flag indicating if the icon comes after the label.
    */
    'trailing': boolean;
    /**
    * Style the button such that it appears to be flush with the surface it is on.
    */
    'unelevated': boolean;
  }
  interface MscButtonAttributes extends StencilHTMLAttributes {
    /**
    * Style the button with slightly smaller text and container.
    */
    'dense'?: boolean;
    /**
    * Prevent the button from being clicked.
    */
    'disabled'?: boolean;
    /**
    * The name of the icon to use with the button.  Name must be that of the [Material Icons](https://material.io/tools/icons/?style=baseline).
    */
    'icon'?: string;
    /**
    * The label text to display on the button.
    */
    'label'?: string;
    /**
    * Style the button with an outline.
    */
    'outlined'?: boolean;
    /**
    * Styles the button such that it appears to be raised off the surface it is on.
    */
    'raised'?: boolean;
    /**
    * A flag indicating if the icon comes after the label.
    */
    'trailing'?: boolean;
    /**
    * Style the button such that it appears to be flush with the surface it is on.
    */
    'unelevated'?: boolean;
  }

  interface MscCard {
    /**
    * An array of name/link pairs that will be used to render Action buttons for the card.
    */
    'buttons'?: {name: string, link?: string}[];
    /**
    * The color used when rendering the card.  Change this to change the text protection color.
    */
    'cardColor': Color;
    /**
    * A path to an image file that will be displayed in the media section of this card.
    */
    'cardMedia': string;
    /**
    * The aspect ratio that the media section will be forced to use.
    */
    'cardMediaAspect': '16-9' | 'square';
    /**
    * The method used to resize the image in the media section of the card.
    */
    'cardMediaSize': 'contain' | 'cover';
    /**
    * The text that will be displayed in the media section as the card title.
    */
    'cardTitle': string;
    /**
    * Flag indicating if the entire card should be treated as an action/link.
    */
    'hasPrimaryAction': boolean;
    /**
    * An array of icon names corresponding to Material Icons.  Each string in the array will be rendered as an icon button in the action section of the card.
    */
    'icons'?: string[];
    /**
    * A flag indicating that the card has no content whatsoever and the
    */
    'noContent': boolean;
    /**
    * A flag indicating that the card has only content and no media (or even placeholder) should be displayed.
    */
    'noMedia': boolean;
    /**
    * Flag to remove the shadow elevation and display a hairline outline instead.
    */
    'outlined': boolean;
  }
  interface MscCardAttributes extends StencilHTMLAttributes {
    /**
    * An array of name/link pairs that will be used to render Action buttons for the card.
    */
    'buttons'?: {name: string, link?: string}[];
    /**
    * The color used when rendering the card.  Change this to change the text protection color.
    */
    'cardColor'?: Color;
    /**
    * A path to an image file that will be displayed in the media section of this card.
    */
    'cardMedia'?: string;
    /**
    * The aspect ratio that the media section will be forced to use.
    */
    'cardMediaAspect'?: '16-9' | 'square';
    /**
    * The method used to resize the image in the media section of the card.
    */
    'cardMediaSize'?: 'contain' | 'cover';
    /**
    * The text that will be displayed in the media section as the card title.
    */
    'cardTitle'?: string;
    /**
    * Flag indicating if the entire card should be treated as an action/link.
    */
    'hasPrimaryAction'?: boolean;
    /**
    * An array of icon names corresponding to Material Icons.  Each string in the array will be rendered as an icon button in the action section of the card.
    */
    'icons'?: string[];
    /**
    * A flag indicating that the card has no content whatsoever and the
    */
    'noContent'?: boolean;
    /**
    * A flag indicating that the card has only content and no media (or even placeholder) should be displayed.
    */
    'noMedia'?: boolean;
    /**
    * An event that is fired when the entire card is clicked and `hasPrimaryAction` is true.
    */
    'onCardClicked'?: (event: CustomEvent) => void;
    /**
    * Flag to remove the shadow elevation and display a hairline outline instead.
    */
    'outlined'?: boolean;
  }

  interface MscDialog {
    /**
    * The possible actions of the Dialog window.  Strings specified here will be displayed as the Dialog buttons and the lowercase version of each string will be passed as the `detail.action` of the `MDCDialog:closed` event.
    */
    'dialogActions': string[];
    /**
    * The title of the dialog window.
    */
    'dialogTitle': string;
    /**
    * Opens the dialog.
    */
    'open': () => void;
  }
  interface MscDialogAttributes extends StencilHTMLAttributes {
    /**
    * The possible actions of the Dialog window.  Strings specified here will be displayed as the Dialog buttons and the lowercase version of each string will be passed as the `detail.action` of the `MDCDialog:closed` event.
    */
    'dialogActions'?: string[];
    /**
    * The title of the dialog window.
    */
    'dialogTitle'?: string;
  }

  interface MscSelect {
    /**
    * Flag indicating if this select menu is disabled.
    */
    'disabled': boolean;
    /**
    * The list of items that will be displayed in the dropdown menu.
    */
    'items': { value: string, label: string }[];
    /**
    * The placeholder/label that is displayed over top of the selected item and in place of a selected item when none are selected.
    */
    'label': string;
    /**
    * A flag indicating whether or not a `select` DOM structure should be used in favour of a `ul`/`li` styled structure.
    */
    'native': boolean;
    /**
    * Flag indicating if the style of the select should be an outline.
    */
    'outlined': boolean;
    /**
    * The width of the select box.  Must be specified when not using the native flag.
    */
    'selectWidth': number;
  }
  interface MscSelectAttributes extends StencilHTMLAttributes {
    /**
    * Flag indicating if this select menu is disabled.
    */
    'disabled'?: boolean;
    /**
    * The list of items that will be displayed in the dropdown menu.
    */
    'items'?: { value: string, label: string }[];
    /**
    * The placeholder/label that is displayed over top of the selected item and in place of a selected item when none are selected.
    */
    'label'?: string;
    /**
    * A flag indicating whether or not a `select` DOM structure should be used in favour of a `ul`/`li` styled structure.
    */
    'native'?: boolean;
    /**
    * Flag indicating if the style of the select should be an outline.
    */
    'outlined'?: boolean;
    /**
    * The width of the select box.  Must be specified when not using the native flag.
    */
    'selectWidth'?: number;
  }
}

declare global {
  interface StencilElementInterfaces {
    'MscButton': Components.MscButton;
    'MscCard': Components.MscCard;
    'MscDialog': Components.MscDialog;
    'MscSelect': Components.MscSelect;
  }

  interface StencilIntrinsicElements {
    'msc-button': Components.MscButtonAttributes;
    'msc-card': Components.MscCardAttributes;
    'msc-dialog': Components.MscDialogAttributes;
    'msc-select': Components.MscSelectAttributes;
  }


  interface HTMLMscButtonElement extends Components.MscButton, HTMLStencilElement {}
  var HTMLMscButtonElement: {
    prototype: HTMLMscButtonElement;
    new (): HTMLMscButtonElement;
  };

  interface HTMLMscCardElement extends Components.MscCard, HTMLStencilElement {}
  var HTMLMscCardElement: {
    prototype: HTMLMscCardElement;
    new (): HTMLMscCardElement;
  };

  interface HTMLMscDialogElement extends Components.MscDialog, HTMLStencilElement {}
  var HTMLMscDialogElement: {
    prototype: HTMLMscDialogElement;
    new (): HTMLMscDialogElement;
  };

  interface HTMLMscSelectElement extends Components.MscSelect, HTMLStencilElement {}
  var HTMLMscSelectElement: {
    prototype: HTMLMscSelectElement;
    new (): HTMLMscSelectElement;
  };

  interface HTMLElementTagNameMap {
    'msc-button': HTMLMscButtonElement
    'msc-card': HTMLMscCardElement
    'msc-dialog': HTMLMscDialogElement
    'msc-select': HTMLMscSelectElement
  }

  interface ElementTagNameMap {
    'msc-button': HTMLMscButtonElement;
    'msc-card': HTMLMscCardElement;
    'msc-dialog': HTMLMscDialogElement;
    'msc-select': HTMLMscSelectElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
